import { Router } from "express";
import type { Request, Response } from "express";
import pool from "../../config/db.js";

export const router = Router();

router.post("/", async (req: Request, res: Response): Promise<void> => {
  const { user_id, goals } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!user_id || !Array.isArray(goals) || goals.length === 0) {
    res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
    return;
  }

  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ createdAt –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ goals
    const goalsWithCreatedAt = goals.map((goal: any) => ({
      ...goal,
      createdAt: new Date().toISOString(),
    }));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [rows]: any = await pool.query(
      "SELECT goals FROM goals WHERE user_id = ?",
      [user_id]
    );

    if (rows.length === 0) {
      // –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await pool.query(
        "INSERT INTO goals (user_id, goals) VALUES (?, ?)",
        [user_id, JSON.stringify(goalsWithCreatedAt)]
      );
    } else {
      // –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ü–µ–ª–∏ –≤ JSON –º–∞—Å—Å–∏–≤
      for (const goal of goalsWithCreatedAt) {
        await pool.query(
          `UPDATE goals 
           SET goals = JSON_ARRAY_APPEND(goals, '$', CAST(? AS JSON))
           WHERE user_id = ?`,
          [JSON.stringify(goal), user_id]
        );
      }
    }

    res.status(201).json({ message: "–¶–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ" });
  } catch (err: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.get("/:user_id", async (req: Request, res: Response): Promise<void> => {
  const { user_id } = req.params;

  if (!user_id) {
    res.status(400).json({ message: "user_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    return;
  }

  try {
    const [rows]: any = await pool.query(
      "SELECT user_id, goals FROM goals WHERE user_id = ?",
      [user_id]
    );

    if (rows.length === 0) {
      res.status(404).json({ message: "–¶–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
      return;
    }

    const { user_id: foundUserId, goals } = rows[0];

    // üß† –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ‚Äî –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    const parsedGoals =
      typeof goals === "string"
        ? JSON.parse(goals || "[]")
        : Array.isArray(goals)
          ? goals
          : [];

    res.status(200).json({
      user_id: foundUserId,
      goals: parsedGoals,
    });
  } catch (err: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.delete("/:user_id/:createdAt", async (req: Request, res: Response): Promise<void> => {
  const { user_id, createdAt } = req.params;

  if (!user_id || !createdAt) {
    res.status(400).json({ message: "user_id –∏ createdAt –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [rows]: any = await pool.query(
      "SELECT goals FROM goals WHERE user_id = ?",
      [user_id]
    );

    if (rows.length === 0) {
      res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }

    const currentGoals: any[] =
      typeof rows[0].goals === "string"
        ? JSON.parse(rows[0].goals)
        : rows[0].goals;

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    const updatedGoals = currentGoals.filter(goal => goal.createdAt !== createdAt);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
    await pool.query(
      "UPDATE goals SET goals = ? WHERE user_id = ?",
      [JSON.stringify(updatedGoals), user_id]
    );

    res.status(200).json({ message: "–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", goals: updatedGoals });
  } catch (err: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.patch("/:user_id/:createdAt", async (req: Request, res: Response): Promise<void> => {
  const { user_id, createdAt } = req.params;
  const { status } = req.body; // —Å—Ç–∞—Ç—É—Å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å —Ñ—Ä–æ–Ω—Ç–∞

  if (!user_id || !createdAt) {
    res.status(400).json({ message: "user_id –∏ createdAt –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    return;
  }

  if (!status) {
    res.status(400).json({ message: "status –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [rows]: any = await pool.query(
      "SELECT goals FROM goals WHERE user_id = ?",
      [user_id]
    );

    if (rows.length === 0) {
      res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }

    const currentGoals: any[] =
      typeof rows[0].goals === "string"
        ? JSON.parse(rows[0].goals)
        : rows[0].goals;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω—É–∂–Ω–æ–π —Ü–µ–ª–∏
    const updatedGoals = currentGoals.map(goal => {
      if (goal.createdAt === createdAt) {
        return { ...goal, status }; // <-- —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å —Å —Ñ—Ä–æ–Ω—Ç–∞
      }
      return goal;
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
    await pool.query(
      "UPDATE goals SET goals = ? WHERE user_id = ?",
      [JSON.stringify(updatedGoals), user_id]
    );

    res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å —Ü–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω", goals: updatedGoals });
  } catch (err: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});